template <typename T>
struct RMQ {
  /* data */
  const T e = numeric_limits<T>::max();
  function<T(T, T)> fx = [](T x1, T x2) -> T { return min(x1, x2); };
  int n;
  vector<T> dat;
  RMQ(int n_) : n(), dat(n_ * 4, e) {
    int x = 1;
    while (n_ > x) {
      x *= 2;
    }
    n = x;
  }

  void update(int i, T x) {
    i += n - 1;
    dat[i] = x;
    while (i > 0) {
      i = (i - 1) / 2;
      dat[i] = fx(dat[i * 2 + 1], dat[i * 2 + 2]);
    }
  }
  T query(int a, int b) { return query_sub(a, b, 0, 0, n); }
  T query_sub(int a, int b, int k, int l, int r) {
    if (r <= a || b <= l)
      return e;
    else if (a <= l && r <= b) {
      return dat[k];
    } else {
      T vl = query_sub(a, b, k * 2 + 1, l, (l + r) / 2);
      T vr = query_sub(a, b, k * 2 + 2, (l + r) / 2, r);
      return fx(vl, vr);
    }
  }
  int find_rightest(int a, int b, T x) {
    return find_rightest_sub(a, b, x, 0, 0, n);
  }
  int find_leftest(int a, int b, T x) {
    return find_leftest_sub(a, b, x, 0, 0, n);
  }
  int find_rightest_sub(int a, int b, T x, int k, int l, int r) {
    if (dat[k] > x || r <= a || b <= l) {
      return a - 1;
    } else if (k >= n - 1) {
      return (k - (n - 1));
    } else {
      int vr = find_rightest_sub(a, b, x, 2 * k + 2, (l + r) / 2, r);
      if (vr != a - 1) {
        return vr;
      } else {
        return find_rightest_sub(a, b, x, 2 * k + 1, l, (l + r) / 2);
      }
    }
  }
  int find_leftest_sub(int a, int b, T x, int k, int l, int r) {
    if (dat[k] > x || r <= a ||
        b <= l) {  // 自分の値がxより大きい or [a,b)が[l,r)の範囲外ならreturn b
      return b;
    } else if (k >= n - 1) {  // 自分が葉ならその位置をreturn
      return (k - (n - 1));
    } else {
      int vl = find_leftest_sub(a, b, x, 2 * k + 1, l, (l + r) / 2);
      if (vl != b) {  // 左の部分木を見て b 以外ならreturn
        return vl;
      } else {  // 右の部分木を見て値をreturn
        return find_leftest_sub(a, b, x, 2 * k + 2, (l + r) / 2, r);
      }
    }
  }
};