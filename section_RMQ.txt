template <typename T>
struct RMQ {
  const T e = numeric_limits<T>::max();
  function<T(T, T)> fx = [](T x1, T x2) -> T { return min(x1, x2); };
  int n;
  vector<T> dat, lazy;
  RMQ(int n_) : n(), dat(n_ * 4, e), lazy(n_ * 4, e) {
    int x = 1;
    while (n_ > x) x *= 2;
    n = x;
  }
  /* lazy eval */
  void eval(int k) {
    if (lazy[k] == e) return;  // 更新するものが無ければ終了
    if (k < n - 1) {           // 葉でなければ子に伝搬
      lazy[k * 2 + 1] = lazy[k];
      lazy[k * 2 + 2] = lazy[k];
    }
    // 自身を更新
    dat[k] = lazy[k];
    lazy[k] = e;
  }
  void update_sub(int a, int b, T x, int k, int l, int r) {
    eval(k);
    if (a <= l && r <= b) {  // 完全に内側の時
      lazy[k] = x;
      eval(k);
    } else if (a < r && l < b) {  // 一部区間が被る時
      update_sub(a, b, x, k * 2 + 1, l, (l + r) / 2);  // 左の子
      update_sub(a, b, x, k * 2 + 2, (l + r) / 2, r);  // 右の子
      dat[k] = fx(dat[k * 2 + 1], dat[k * 2 + 2]);
    }
  }
  void update(int a, int b, T x) { update_sub(a, b, x, 0, 0, n); }
  T query_sub(int a, int b, int k, int l, int r) {
    eval(k);
    if (r <= a || b <= l) {  // 完全に外側の時
      return e;
    } else if (a <= l && r <= b) {  // 完全に内側の時
      return dat[k];
    } else {  // 一部区間が被る時
      T vl = query_sub(a, b, k * 2 + 1, l, (l + r) / 2);
      T vr = query_sub(a, b, k * 2 + 2, (l + r) / 2, r);
      return fx(vl, vr);
    }
  }
  T query(int a, int b) { return query_sub(a, b, 0, 0, n); }
  /* debug */
  inline T operator[](int a) { return query(a, a + 1); }
  void print() {
    for (int i = 0; i < 2 * n - 1; ++i) {
      cout << (*this)[i];
      if (i != n) cout << ",";
    }
    cout << endl;
  }
};